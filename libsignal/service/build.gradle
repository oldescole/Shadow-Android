apply plugin: 'java-library'
apply plugin: 'java-test-fixtures'
apply plugin: 'com.google.protobuf'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'witness'
apply plugin: 'idea'
apply from: 'witness-verifications.gradle'

sourceCompatibility = 1.8
archivesBaseName    = "signal-service-java"
version             = lib_signal_service_version_number
group               = lib_signal_service_group_info

java {
    targetCompatibility = 1.8
    withJavadocJar()
    withSourcesJar()
}

compileJava {
    options.release = 8
}

repositories {
    mavenCentral()
    mavenLocal()
}

configurations {
    ideaTestFixturesImplementation { extendsFrom testFixturesImplementation; canBeConsumed false; canBeResolved true }
}

dependencies {
    implementation 'com.google.protobuf:protobuf-javalite:3.10.0'
    api 'com.googlecode.libphonenumber:libphonenumber:8.12.17'
    api 'com.fasterxml.jackson.core:jackson-databind:2.10.0'

    implementation "org.whispersystems:signal-client-java:${LIBSIGNAL_CLIENT_VERSION}"
    api 'com.squareup.okhttp3:okhttp:3.12.10'
    implementation 'org.threeten:threetenbp:1.3.6'

    api 'io.reactivex.rxjava3:rxjava:3.0.13'

    api 'org.signal:zkgroup-java:0.7.0'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:3.11.1'
    testImplementation 'org.conscrypt:conscrypt-openjdk-uber:2.0.0'
    testImplementation 'org.testng:testng:6.9.6'
    testFixturesImplementation "org.whispersystems:signal-client-java:${LIBSIGNAL_CLIENT_VERSION}"
    testFixturesImplementation 'junit:junit:4.12'
}

dependencyVerification {
    configuration = '(runtime|compile)Classpath'
}

tasks.whenTaskAdded { task ->
    if (task.name.equals("lint")) {
        task.enabled = false
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.10.0'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
    generatedFilesBaseDir = "$projectDir/src/"
}

idea {
    module {
        generatedSourceDirs += file("${protobuf.generatedFilesBaseDir}/main/java")
        scopes.COMPILE.plus += [configurations.ideaTestFixturesImplementation]
    }
}

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

task installArchives(type: Upload) {
    description "Installs the artifacts to the local Maven repository."
    configuration = configurations['archives']
    repositories {
        mavenLocal()
    }
}

task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task packageSources(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives packageJavadoc
    archives packageSources
}