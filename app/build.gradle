import su.sres.signing.ApkSignerUtil

import java.security.MessageDigest

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.protobuf'
apply plugin: 'androidx.navigation.safeargs'
apply plugin: 'witness'
apply plugin: 'org.jlleitschuh.gradle.ktlint'
apply from: 'translations.gradle'
apply from: 'witness-verifications.gradle'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'app.cash.exhaustive'
apply plugin: 'kotlin-parcelize'

repositories {
    maven {
        url "https://raw.github.com/signalapp/maven/master/circular-progress-button/releases/"
        content {
            includeGroupByRegex "com\\.github\\.dmytrodanylyk\\.circular-progress-button\\.*"
        }
    }

    maven {
        url "https://raw.github.com/signalapp/maven/master/sqlcipher/release/"
        content {
            includeGroupByRegex "org\\.signal.*"
        }
    }

    google()
    mavenCentral()
    mavenLocal()
    maven {
        url "https://dl.cloudsmith.io/qxAgwaeEE1vN8aLU/mobilecoin/mobilecoin/maven/"
    }
    jcenter {
        content {
            includeVersion "mobi.upod", "time-duration-picker", "1.1.3"
        }
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.10.0'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}

def canonicalVersionCode = 39
def canonicalVersionName = "1.19.1"

def postFixSize = 100
def abiPostFix = ['universal'  : 0,
                  'armeabi-v7a': 1,
                  'arm64-v8a'  : 2,
                  'x86'        : 3,
                  'x86_64'     : 4]

def keystores = ['debug': loadKeystoreProperties('keystore.debug.properties')]

def selectableVariants = [
        'internalProdFlipper',
        'internalProdPerf',
        'internalProdRelease',
        'internalStagingFlipper',
        'internalStagingPerf',
        'internalStagingRelease',
        'nightlyProdFlipper',
        'nightlyProdPerf',
        'nightlyProdRelease',
        'nightlyStagingPerf',
        'playProdDebug',
        'playProdFlipper',
        'playProdPerf',
        'playProdRelease',
        'playStagingDebug',
        'playStagingFlipper',
        'playStagingPerf',
        'playStagingRelease',
        'studyProdMock',
        'studyProdPerf',
        'websiteProdFlipper',
        'websiteProdRelease',
]

android {
    buildToolsVersion BUILD_TOOL_VERSION
    compileSdkVersion COMPILE_SDK
    flavorDimensions 'distribution', 'environment'
    useLibrary 'org.apache.http.legacy'

    buildFeatures {
        dataBinding true
        viewBinding true
    }

    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ["-Xallow-result-return-type"]
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    signingConfigs {
        if (keystores.debug != null) {
            debug {
                storeFile file("${project.rootDir}/${keystores.debug.storeFile}")
                storePassword keystores.debug.storePassword
                keyAlias keystores.debug.keyAlias
                keyPassword keystores.debug.keyPassword
            }
        }
    }

    defaultConfig {
        versionCode canonicalVersionCode * postFixSize
        versionName canonicalVersionName

        minSdkVersion MINIMUM_SDK
        targetSdkVersion TARGET_SDK
        multiDexEnabled true

        vectorDrawables.useSupportLibrary = true
        project.ext.set("archivesBaseName", "Shadow");

        buildConfigField "long", "BUILD_TIMESTAMP", getLastCommitTimestamp() + "L"
        buildConfigField "String", "GIT_HASH", "\"${getGitHash()}\""

        buildConfigField "String", "CONTENT_PROXY_HOST", "\"contentproxy.signal.org\""
        buildConfigField "int", "CONTENT_PROXY_PORT", "443"
        buildConfigField "String", "SIGNAL_AGENT", "\"OWA\""
        buildConfigField "String[]", "LANGUAGES", "new String[]{\"" + autoResConfig().collect { s -> s.replace('-r', '_') }.join('", "') + '"}'
        buildConfigField "int", "CANONICAL_VERSION_CODE", "$canonicalVersionCode"
        buildConfigField "String", "DEFAULT_CURRENCIES", "\"EUR,AUD,GBP,CAD,CNY\""
        buildConfigField "int[]", "MOBILE_COIN_REGIONS", "new int[]{44,49,33,41}"
        buildConfigField "String", "GIPHY_API_KEY", "\"3o6ZsYH6U6Eri53TXy\""
        buildConfigField "String", "RECAPTCHA_PROOF_URL", "\"https://signalcaptchas.org/challenge/generate.html\""

        buildConfigField "String", "BUILD_DISTRIBUTION_TYPE", "\"unset\""
        buildConfigField "String", "BUILD_ENVIRONMENT_TYPE", "\"unset\""
        buildConfigField "String", "BUILD_VARIANT_TYPE", "\"unset\""

        // TODO: move this to service config
        buildConfigField "String", "BADGE_STATIC_ROOT", "\"https://example.com/\""
        buildConfigField "String", "STRIPE_PUBLISHABLE_KEY", "\"abcdefg\""

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }

        resConfigs autoResConfig()

        splits {
            abi {
                enable true
                reset()
                include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
                universalApk true
            }
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JAVA_VERSION
        targetCompatibility JAVA_VERSION
        coreLibraryDesugaringEnabled true
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'LICENSE'
        exclude 'NOTICE'
        exclude 'asm-license.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/proguard/androidx-annotations.pro'
        exclude '/org/spongycastle/x509/CertPathReviewerMessages.properties'
        exclude '/org/spongycastle/x509/CertPathReviewerMessages_de.properties'
    }

    buildTypes {
        debug {
            if (keystores['debug'] != null) {
                signingConfig signingConfigs.debug
            }
            isDefault true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard/proguard-firebase-messaging.pro',
                    'proguard/proguard-google-play-services.pro',
                    'proguard/proguard-jackson.pro',
                    'proguard/proguard-sqlite.pro',
                    'proguard/proguard-appcompat-v7.pro',
                    'proguard/proguard-square-okhttp.pro',
                    'proguard/proguard-square-okio.pro',
                    'proguard/proguard-spongycastle.pro',
                    'proguard/proguard-rounded-image-view.pro',
                    'proguard/proguard-glide.pro',
                    'proguard/proguard-shortcutbadger.pro',
                    'proguard/proguard-retrofit.pro',
                    'proguard/proguard-webrtc.pro',
                    'proguard/proguard-klinker.pro',
                    'proguard/proguard-retrolambda.pro',
                    'proguard/proguard-okhttp.pro',
                    'proguard/proguard-ez-vcard.pro',
                    'proguard/proguard-validator.pro',
                    'proguard/proguard.cfg'
            testProguardFiles 'proguard/proguard-automation.pro',
                    'proguard/proguard.cfg'

            buildConfigField "String", "BUILD_VARIANT_TYPE", "\"Debug\""
        }

        flipper {
            initWith debug
            isDefault false
            minifyEnabled false
            matchingFallbacks = ['debug']
            buildConfigField "String", "BUILD_VARIANT_TYPE", "\"Flipper\""
        }

        release {
            minifyEnabled true
            proguardFiles = buildTypes.debug.proguardFiles
            buildConfigField "String", "BUILD_VARIANT_TYPE", "\"Release\""
        }
        perf {
            initWith debug
            isDefault false
            debuggable false
            matchingFallbacks = ['debug']
            buildConfigField "String", "BUILD_VARIANT_TYPE", "\"Perf\""
        }
        mock {
            initWith debug
            isDefault false
            minifyEnabled false
            matchingFallbacks = ['debug']
            buildConfigField "String", "BUILD_VARIANT_TYPE", "\"Mock\""
        }
    }

    productFlavors {
        play {
            dimension 'distribution'
            ext.websiteUpdateUrl = "null"
            buildConfigField "boolean", "PLAY_STORE_DISABLED", "false"
            buildConfigField "String", "NOPLAY_UPDATE_URL", "$ext.websiteUpdateUrl"
            buildConfigField "String", "BUILD_DISTRIBUTION_TYPE", "\"play\""
        }

        website {
            dimension 'distribution'
            isDefault true
            ext.websiteUpdateUrl = "https://shadowupdate.sres.su:19080/android"
            buildConfigField "boolean", "PLAY_STORE_DISABLED", "true"
            buildConfigField "String", "NOPLAY_UPDATE_URL", "\"$ext.websiteUpdateUrl\""
            buildConfigField "String", "BUILD_DISTRIBUTION_TYPE", "\"website\""
        }

        internal {
            dimension 'distribution'
            ext.websiteUpdateUrl = "null"
            buildConfigField "boolean", "PLAY_STORE_DISABLED", "false"
            buildConfigField "String", "NOPLAY_UPDATE_URL", "$ext.websiteUpdateUrl"
            buildConfigField "String", "BUILD_DISTRIBUTION_TYPE", "\"internal\""
        }

        nightly {
            dimension 'distribution'
            versionNameSuffix "-nightly-untagged-${getDateSuffix()}"
            ext.websiteUpdateUrl = "null"
            buildConfigField "boolean", "PLAY_STORE_DISABLED", "false"
            buildConfigField "String", "NOPLAY_UPDATE_URL", "$ext.websiteUpdateUrl"
            buildConfigField "String", "BUILD_DISTRIBUTION_TYPE", "\"nightly\""
        }

        study {
            dimension 'distribution'

            applicationIdSuffix ".study"
            ext.websiteUpdateUrl = "null"
            buildConfigField "boolean", "PLAY_STORE_DISABLED", "false"
            buildConfigField "String", "NOPLAY_UPDATE_URL", "$ext.websiteUpdateUrl"
            buildConfigField "String", "BUILD_DISTRIBUTION_TYPE", "\"study\""
        }

        prod {
            dimension 'environment'
            isDefault true

            buildConfigField "String", "MOBILE_COIN_ENVIRONMENT", "\"mainnet\""
            buildConfigField "String", "BUILD_ENVIRONMENT_TYPE", "\"Prod\""
        }

        staging {
            dimension 'environment'
            applicationIdSuffix ".staging"

            buildConfigField "String", "MOBILE_COIN_ENVIRONMENT", "\"testnet\""
            buildConfigField "String", "RECAPTCHA_PROOF_URL", "\"https://signalcaptchas.org/staging/challenge/generate.html\""

            buildConfigField "String", "BUILD_ENVIRONMENT_TYPE", "\"Staging\""
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            if (output.baseName.contains('nightly')) {
                output.versionCodeOverride = canonicalVersionCode * postFixSize + 5
                def tag = getCurrentGitTag()
                if (tag != null && tag.length() > 0) {
                    output.versionNameOverride = tag
                }
            } else {
                output.outputFileName = output.outputFileName.replace(".apk", "-${variant.versionName}.apk")
                def abiName = output.getFilter("ABI") ?: 'universal'
                def postFix = abiPostFix.get(abiName, 0)

                if (postFix >= postFixSize) throw new AssertionError("postFix is too large")

                output.versionCodeOverride = canonicalVersionCode * postFixSize + postFix
            }
        }
    }

    android.variantFilter { variant ->
        def distribution = variant.getFlavors().get(0).name
        def environment = variant.getFlavors().get(1).name
        def buildType = variant.buildType.name
        def fullName     = distribution + environment.capitalize() + buildType.capitalize()

        if (!selectableVariants.contains(fullName)) {
            variant.setIgnore(true)
        }
    }

    lintOptions {
        abortOnError true
        baseline file("lint-baseline.xml")
        disable "LintError"
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    externalNativeBuild {
        ndkBuild {
            path file('jni/Android.mk')
        }
    }
}

dependencies {

    implementation libs.androidx.core.ktx
    implementation libs.androidx.fragment.ktx
    lintChecks project(':lintchecks')

    coreLibraryDesugaring libs.android.tools.desugar

    implementation (libs.androidx.appcompat) {
        version {
            strictly '1.2.0'
        }
    }

    implementation libs.androidx.window
    implementation libs.androidx.recyclerview
    implementation libs.material.material
    implementation libs.androidx.legacy.support
    implementation libs.androidx.cardview
    implementation libs.androidx.preference
    implementation libs.androidx.legacy.preference
    implementation libs.androidx.gridlayout
    implementation libs.androidx.exifinterface
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.multidex
    implementation libs.androidx.navigation.fragment.ktx
    implementation libs.androidx.navigation.ui.ktx
    implementation libs.androidx.lifecycle.extensions
    implementation libs.androidx.lifecycle.viewmodel.savedstate
    implementation libs.androidx.lifecycle.common.java8
    implementation libs.androidx.lifecycle.reactivestreams.ktx
    implementation libs.androidx.camera.core
    implementation libs.androidx.camera.camera2
    implementation libs.androidx.camera.lifecycle
    implementation libs.androidx.camera.view
    implementation libs.androidx.concurrent.futures
    implementation libs.androidx.autofill
    implementation libs.androidx.biometric
    implementation libs.androidx.sharetarget

    implementation (libs.firebase.messaging) {
        exclude group: 'com.google.firebase', module: 'firebase-core'
        exclude group: 'com.google.firebase', module: 'firebase-analytics'
        exclude group: 'com.google.firebase', module: 'firebase-measurement-connector'
    }
    implementation libs.google.play.services.maps
    implementation libs.google.play.services.auth

    implementation libs.bundles.exoplayer

    implementation libs.conscrypt.android
    implementation libs.signal.aesgcmprovider

    implementation project(':libsignal-service')
    implementation project(':paging')
    implementation project(':core-util')
    implementation project(':video')
    implementation project(':device-transfer')
    implementation project(':image-editor')
    implementation project(':donations')
    implementation project(':sticky-header-grid')
    implementation project(':photoview')

    implementation libs.signal.zkgroup.android
    implementation libs.signal.client.android
    implementation libs.google.protobuf.javalite
    implementation(libs.mobilecoin) {
        exclude group: 'com.google.protobuf'
    }
    implementation(libs.signal.argon2) {
        artifact {
            type = "aar"
        }
    }

    implementation libs.signal.ringrtc

    implementation libs.leolin.shortcutbadger
    implementation libs.emilsjolander.stickylistheaders
    implementation libs.jpardogo.materialtabstrip
    implementation libs.apache.httpclient.android
    implementation libs.glide.glide
    kapt libs.glide.compiler
    kapt libs.androidx.annotation
    implementation libs.roundedimageview
    implementation libs.materialish.progress
    implementation libs.greenrobot.eventbus
    implementation libs.waitingdots
    implementation libs.floatingactionbutton
    implementation libs.google.zxing.android.integration
    implementation libs.google.zxing.core
    implementation libs.google.flexbox
    implementation (libs.subsampling.scale.image.view) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    implementation (libs.android.tooltips) {
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }
    implementation (libs.android.smsmms) {
        exclude group: 'com.squareup.okhttp', module: 'okhttp'
        exclude group: 'com.squareup.okhttp', module: 'okhttp-urlconnection'
    }
    implementation libs.stream

    implementation libs.lottie

    implementation libs.circular.progress.button

    implementation libs.signal.android.database.sqlcipher
    implementation libs.androidx.sqlite

    implementation (libs.google.ez.vcard) {
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'org.freemarker'
    }

    implementation libs.dnsjava
    implementation libs.commons.csv

    flipperImplementation libs.facebook.flipper
    flipperImplementation libs.facebook.soloader

    releaseImplementation 'com.facebook.flipper:flipper-noop:0.75.0'

    testImplementation testLibs.junit.junit
    testImplementation testLibs.assertj.core
    testImplementation testLibs.mockito.core
    testImplementation testLibs.powermock.api.mockito
    testImplementation testLibs.powermock.module.junit4.core
    testImplementation testLibs.powermock.module.junit4.rule
    testImplementation testLibs.powermock.classloading.xstream

    testImplementation testLibs.androidx.test.core
    testImplementation (testLibs.robolectric.robolectric) {
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
    }
    testImplementation testLibs.robolectric.shadows.multidex
    testImplementation testLibs.hamcrest.hamcrest

    testImplementation(testFixtures(project(":libsignal-service")))

    androidTestImplementation testLibs.androidx.test.ext.junit
    androidTestImplementation testLibs.espresso.core

    testImplementation testLibs.espresso.core

    implementation libs.kotlin.stdlib.jdk8
    implementation libs.kotlin.reflect
    implementation libs.jackson.module.kotlin

    implementation libs.rxjava3.rxandroid
    implementation libs.rxjava3.rxkotlin
}

dependencyVerification {
    configuration = '(play|website)(Prod|Staging)(Debug|Release)RuntimeClasspath'
}

def assembleWebsiteDescriptor = { variant, file ->
    if (file.exists()) {
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        file.eachByte 4096, { bytes, size ->
            md.update(bytes, 0, size);
        }


        String digest = md.digest().collect { String.format "%02x", it }.join();
        String url = variant.productFlavors.get(0).ext.websiteUpdateUrl
        String apkName = file.getName()

        String descriptor = "{" +
                "\"versionCode\" : ${canonicalVersionCode * postFixSize + abiPostFix['universal']}," +
                "\"versionName\" : \"$canonicalVersionName\"," +
                "\"sha256sum\" : \"$digest\"," +
                "\"url\" : \"$url/$apkName\"" +
                "}"

        File descriptorFile = new File(file.getParent(), apkName.replace(".apk", ".json"))

        descriptorFile.write(descriptor)

    }
}

def signProductionRelease = { variant ->
    variant.outputs.collect { output ->
        String apkName = output.outputFile.name
        File inputFile = new File(output.outputFile.path)
        File outputFile = new File(output.outputFile.parent, apkName.replace('-unsigned', ''))

        new ApkSignerUtil('JKS',
                'shadow_client.jks',
                'file:shadow_client_jks.password').calculateSignature(inputFile.getAbsolutePath(),
                outputFile.getAbsolutePath())

        inputFile.delete()
        outputFile
    }
}

task signProductionPlayRelease {
    doLast {
        signProductionRelease(android.applicationVariants.find { (it.name == 'playProdRelease') })
    }
}

task signProductionInternalRelease {
    doLast {
        signProductionRelease(android.applicationVariants.find { (it.name == 'internalProdRelease') })
    }
}

task signProductionWebsiteRelease {
    doLast {
        def variant = android.applicationVariants.find { (it.name == 'websiteProdRelease') }
        File signedRelease = signProductionRelease(variant).find { it.name.contains('universal') }
        assembleWebsiteDescriptor(variant, signedRelease)
    }
}

def getLastCommitTimestamp() {
    if (!(new File('.git').exists())) {
        return System.currentTimeMillis().toString()
    }

    new ByteArrayOutputStream().withStream { os ->
        def result = exec {
            executable = 'git'
            args = ['log', '-1', '--pretty=format:%ct']
            standardOutput = os
        }

        return os.toString() + "000"
    }
}

def getGitHash() {
    if (!(new File('.git').exists())) {
        return "abcd1234"
    }

    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getCurrentGitTag() {
    if (!(new File('.git').exists())) {
        return ''
    }

    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'tag', '--points-at', 'HEAD'
        standardOutput = stdout
    }

    def output = stdout.toString().trim()

    if (output != null && output.size() > 0) {
        return output.split('\n')[0];
    } else {
        return null
    }
}

tasks.withType(Test) {
    testLogging {
        events "failed"
        exceptionFormat "full"
        showCauses true
        showExceptions true
        showStackTraces true
    }
}

def loadKeystoreProperties(filename) {
    def keystorePropertiesFile = file("${project.rootDir}/${filename}")
    if (keystorePropertiesFile.exists()) {
        def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
        return keystoreProperties;
    } else {
        return null;
    }
}

def getDateSuffix() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd-HH:mm')
    return formattedDate
}